#NOTE: numpy 2.1 is only supported by 3.10 and greater
[build-system]
requires = ["scikit-build-core>=0.11.2", "numpy>=2.0"]
build-backend = "scikit_build_core.build"


[project]
name = "pyradiomics"
authors = [
    { name = "PyRadiomics Community", email = "pyradiomics@googlegroups.com"}
]
description = "Radiomics features library for python"
readme = "README.md"
requires-python =">=3.9"
license = "BSD-3-Clause"
license-files = ["LICENSE.txt"]
keywords = [ "radiomics", "cancerimaging", "medicalresearch", "computationalimaging" ]
classifiers = [
    'Development Status :: 5 - Production/Stable',
    'Environment :: Console',
    'Intended Audience :: Developers',
    'Intended Audience :: Science/Research',
    'Operating System :: OS Independent',
    'Programming Language :: C',
    'Programming Language :: Python :: 3.9',
    'Programming Language :: Python :: 3.10',
    'Programming Language :: Python :: 3.11',
    'Programming Language :: Python :: 3.12',
    'Programming Language :: Python :: 3.13',
    'Topic :: Scientific/Engineering :: Bio-Informatics'
]
dynamic = ["version"]
dependencies = [
    "numpy>=2.0",
    "SimpleITK>=2.4.0",
    "PyWavelets >= 1.6.0",
    "pykwalify >= 1.6.0"
]

[project.optional-dependencies]
test = [
    "pytest >=6",
    "pytest-cov >=3",
    "coverage >= 7.8.0",
]
dev = [
    "pre-commit >= 4.2.0",
    "pytest >=6",
    "pytest-cov >=3",
    "coverage >= 7.8.0",
]
docs = [
    "sphinx>=7.0",
    "myst_parser>=0.13",
    "sphinx_copybutton",
    "sphinx_autodoc_typehints",
    "furo>=2023.08.17",
]

[project.scripts]
pyradiomics = "radiomics.scripts.__init__:parse_args"

[project.urls]
"Homepage" = "https://github.com/AIM-Harvard/pyradiomics#readme"
"Bug Tracker" = "https://github.com/AIM-Harvard/pyradiomics/issues"
Discussions = "https://github.com/AIM-Harvard/pyradiomics/discussions"
Changelog = "https://github.com/AIM-Harvard/pyradiomics/changes.rst"
"Radiomics.io" = "https://www.radiomics.io/"
"Documentation" = "https://pyradiomics.readthedocs.io/en/latest/index.html"
"Docker" = "https://hub.docker.com/r/radiomics/pyradiomics/"
"Github" = "https://github.com/AIM-Harvard/pyradiomics"


[tool.scikit-build]
minimum-version = "build-system.requires"
build-dir = "build/{wheel_tag}"
metadata.version.provider = "scikit_build_core.metadata.setuptools_scm"
sdist.include = ["radiomics/_version.py"]
sdist.exclude = [".github", '.*']
wheel.packages = ['radiomics', 'radiomics.scripts']
wheel.exclude = ['radiomics/src']


[tool.setuptools_scm]
write_to = "radiomics/_version.py"


[tool.uv]
dev-dependencies = [
    "pyradiomics[test]",
]


[tool.cibuildwheel]
test-command = "pytest {project}/tests"
test-extras = ["test"]
# Only builds that are supported by SimpleITK are allowed. Get list of SimpleITK builds from https://pypi.org/project/SimpleITK/#files
# Match to environments in https://cibuildwheel.pypa.io/en/stable/options/#build-skip
build = "cp3*-manylinux_x86_64 cp3*-manylinux_aarch64 cp3*-win_amd64 cp3*-macosx* "

[tool.cibuildwheel.linux]

[tool.cibuildwheel.macos]

[tool.cibuildwheel.windows]


[tool.pytest.ini_options]
minversion = "6.0"
addopts = ["-ra", "--showlocals", "--strict-markers", "--strict-config"]
xfail_strict = true
filterwarnings = [
    #   "error", # <- NOTE: this causes a segmentation fault during testing
    "ignore:the load_module\\(\\) method is deprecated:DeprecationWarning",
    # The following are issued by many versions of SimpleITK with newer Python versions
    "ignore:.*builtin type SwigPyPacked has no __module__ attribute:DeprecationWarning",
    "ignore:.*builtin type SwigPyObject has no __module__ attribute:DeprecationWarning",
    "ignore:.*builtin type swigvarlink has no __module__ attribute:DeprecationWarning",
]
log_cli_level = "INFO"
testpaths = [
    "tests",
]


[tool.coverage]
run.source = ["radiomics"]
report.exclude_also = [
    '\.\.\.',
    'if typing.TYPE_CHECKING:',
]


[tool.mypy]
files = ["radiomics", "tests"]
python_version = "3.9"
warn_unused_configs = true
strict = true
enable_error_code = ["ignore-without-code", "redundant-expr", "truthy-bool"]
warn_unreachable = true
disallow_untyped_defs = false
disallow_incomplete_defs = false

[[tool.mypy.overrides]]
module = "radiomics.*"
disallow_untyped_defs = true
disallow_incomplete_defs = true


[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    ".idea",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]



[tool.ruff.lint]
extend-select = [
    "ARG",      # flake8-unused-arguments
    "B",        # flake8-bugbear
    "C4",       # flake8-comprehensions
    "EM",       # flake8-errmsg
    "EXE",      # flake8-executable
    "G",        # flake8-logging-format
    "I",        # isort
    "ICN",      # flake8-import-conventions
    "NPY",      # NumPy specific rules
    "PD",       # pandas-vet
    "PGH",      # pygrep-hooks
    "PIE",      # flake8-pie
    "PL",       # pylint
    "PT",       # flake8-pytest-style
    "PTH",      # flake8-use-pathlib
    "RET",      # flake8-return
    "RUF",      # Ruff-specific
    "SIM",      # flake8-simplify
    "T20",      # flake8-print
    "UP",       # pyupgrade
    "YTT",      # flake8-2020
]
ignore = [
    # Keep the suppressions as OK to not conform to scientific python strictest recommendations
    "PLR09",    # Too many <...>
    "PLR2004",  # Magic value used in comparison
    "ISC001",   # Conflicts with formatter
    "T201",   # `print` found ## See https://docs.astral.sh/ruff/rules/print
# ----- The following are suppressions to allow initial passing of ruff linting
    "PLW0602",   # TODO: Delay fixing until later
    "ARG001", # Unused function argument: `param_num`
    "B007", # Loop control variable `args` not used within loop body
    "EM101", # Exception must not use a string literal, assign to variable first
    "G004", # Logging statement uses f-string
    "ICN001", # `numpy` should be imported as `np`
    "PLW0603", # Using the global statement to update `featureClass` is discouraged
    "PTH100", # `os.path.abspath()` should be replaced by `Path.resolve()`
    "PTH113", # `os.path.isfile()` should be replaced by `Path.is_file()`
    "PTH118", # `os.path.join()` should be replaced by `Path` with `/` operator
    "PTH120", # `os.path.dirname()` should be replaced by `Path.parent`
    "PTH123", # `open()` should be replaced by `Path.open()`
    "PTH208", # Use `pathlib.Path.iterdir()` instead
    "RUF005", # Consider `["featureName", *cases]` instead of concatenation
    "RUF100", # (unused-noqa)
    "ARG002",   # Unused methodargument:`total`
    "B008",   # Do notperformfunctioncall`CodedValue`
    "B904",   # Within an`except`clause,raiseexceptions
    "C416",   # Unnecessary listcomprehension(rewriteusing`list()`)
    "E402",   # Module levelimportnotattop
    "EM102",   # Exception mustnotuseanf-string
    "EXE001",   # Shebang ispresentbutfileis
    "F401",   # `pykwalify.compat.yaml` importedbutunused
    "G002",   # Logging statementuses`%`
    "G003",   # Logging statementuses`+`
    "G201",   # Logging `.exception(...)`shouldbeusedinstead
    "PD011",   # Use `.to_numpy()`insteadof`.values`
    "PIE810",   # Call `endswith`oncewitha`tuple`
    "PLR1722",   # Use `sys.exit()`insteadof`exit`
    "PLR1730",   # Replace `if`statementwith`level=
    "PLW2901",   # `for` loopvariable`features`overwrittenby
    "PTH102",   # `os.mkdir()` shouldbereplacedby`Path.mkdir()`
    "PTH103",   # `os.makedirs()` shouldbereplacedby`Path.mkdir(parents=True)`
    "PTH107",   # `os.remove()` shouldbereplacedby`Path.unlink()`
    "PTH109",   # `os.getcwd()` shouldbereplacedby`Path.cwd()`
    "PTH110",   # `os.path.exists()` shouldbereplacedby`Path.exists()`
    "PTH112",   # `os.path.isdir()` shouldbereplacedby`Path.is_dir()`
    "PTH117",   # `os.path.isabs()` shouldbereplacedby`Path.is_absolute()`
    "PTH119",   # `os.path.basename()` shouldbereplacedby`Path.name`
    "PTH122",   # `os.path.splitext()` shouldbereplacedby`Path.suffix`,
    "PTH207",   # Replace `glob`with`Path.glob`or`Path.rglob`
    "RET504",   # Unnecessary assignmentto`complexity`before`return`
    "RUF015",   # Prefer `next(iter(current_baseline.keys()))`oversingleelementslice
    # "SIM101",   # Multiple `isinstance`callsforexpression,merge
    # "SIM103",   # Return theconditiondirectly
    # "SIM108",   # Use ternaryoperator`label=int(label)
    # "SIM115",   # Use acontextmanagerforopening
    # "SIM118",   # Use `keyindict`insteadof
    # "SIM210",   # Use `bool(...)`insteadof`Trueif
    # "UP031",   # Use formatspecifiersinsteadofpercent
]

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

isort.required-imports = ["from __future__ import annotations"]
# Uncomment if using a _compat.typing backport
# typing-modules = ["pyradiomics._compat.typing"]

[tool.ruff.lint.per-file-ignores]
"tests/**" = ["T20"]
"noxfile.py" = ["T20"]


[tool.pylint]
py-version = "3.9"
ignore-paths = [".*/_version.py"]
reports.output-format = "colorized"
similarities.ignore-imports = "yes"
messages_control.disable = [
    "design",
    "fixme",
    "line-too-long",
    "missing-module-docstring",
    "missing-function-docstring",
    "wrong-import-position",
]

[tool.codespell]
#dictionary = ".codespellignore,-"
ignore-words-list = 'bar,-foo'
ignore-words = "./.codespellignore"
skip = '*.po,*.ts,./radiomics/src,./test'
count = true
quiet-level = 3
