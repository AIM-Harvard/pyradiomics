# To test:
# docker pull circleci/picard
# docker run -it --rm -v /var/run/docker.sock:/var/run/docker.sock -v $(pwd):$(pwd) -v ~/.circleci/:/root/.circleci --workdir $(pwd) circleci/picard circleci build

version: 2.1
jobs:
  test-notebooks:
    working_directory: /pyradiomics
    docker:
      - image: jupyter/datascience-notebook
        user: root
    steps:
      - run:
          # CircleCI says we need SSH and the docker doesn't have it installed
          name: Update
          command: |
            apt-get update
            apt-get install -y openssh-client openssh-server
      - run:
          name: Avoid hosts unknown for github
          command: echo -e "Host github.com\n\tStrictHostKeyChecking no\n" > /etc/ssh/ssh_config
      - checkout
      - run:
          name: Install pyradiomics in Python 3
          command: |
            source activate root
            python -m pip install --no-cache-dir -r requirements.txt
            python -m pip install --no-cache-dir -r requirements-dev.txt
            python setup.py install
      - run:
          name: test notebooks in python 3
          command: |
            jupyter nbconvert --ExecutePreprocessor.kernel_name=python3 --ExecutePreprocessor.timeout=-1 --to notebook --output-dir /tmp --execute  notebooks/helloRadiomics.ipynb notebooks/helloFeatureClass.ipynb notebooks/PyRadiomicsExample.ipynb

  build-mac-37: &build_mac_template
    working_directory: ~/pyradiomics
    macos:
      xcode: 12.5.1
    environment:
      PYTHON_VERSION: 3.7.10
      PYTHON_SHORT_VERSION: 3.7
    steps:
      - run:
          name: Setup MAC OS environment
          # Workaround the following error occurring because python installation is cached but gettext dependency is not
          #   dyld: Library not loaded: /usr/local/opt/gettext/lib/libintl.8.dylib
          #     Referenced from: /Users/travis/.pyenv/versions/3.7.2/bin/python
          #     Reason: Incompatible library version: python requires version 11.0.0 or later, but libintl.8.dylib provides version 10.0.0
          # See https://github.com/scikit-build/cmake-python-distributions/issues/112 and
          # https://github.com/scikit-build/cmake-python-distributions/pull/113
          command: |
            echo "HOMEBREW_NO_AUTO_UPDATE=1" >> $BASH_ENV
            brew install gettext
            brew install pyenv
            echo 'export PATH=$HOME/.pyenv/versions/$PYTHON_VERSION/bin:$HOME/bin:$PATH' >> $BASH_ENV
            mkdir -p $HOME/bin
            ln -s $(which pip3) $HOME/bin/pip
            ln -s $(which python3) $HOME/bin/python
            pyenv install --list
            pyenv install $PYTHON_VERSION
      - run:
          name: Setup SciKit-CI
          command: |
            pip install scikit-ci scikit-ci-addons
            ci_addons --install ../addons
      - run:
          name: Setup PyEnv
          command: python ../addons/travis/install_pyenv.py
      - checkout
      - attach_workspace:
          at: ~/pyradiomics
      - run:
          name: Install
          command: ci install
      - run:
          name: Test
          command: ci test
      - run:
          name: Build Distribution
          command: ci after_test
      - persist_to_workspace:
          root: .
          paths: [dist]

  build-mac-38:
    <<: *build_mac_template
    environment:
      PYTHON_VERSION: 3.8.10
      PYTHON_SHORT_VERSION: 3.7

  build-mac-39:
    <<: *build_mac_template
    environment:
      PYTHON_VERSION: 3.9.5
      PYTHON_SHORT_VERSION: 3.9

  build-37: &build_template
    working_directory: /pyradiomics
    docker:
      - image: cimg/python:3.7
        user: root
    steps:
      - checkout
      - attach_workspace:
          at: /pyradiomics
      - run:
          name: Setup SciKit-CI
          command: |
            pip install scikit-ci==0.13.0 scikit-ci-addons==0.11.0
            ci_addons --install ../addons
      - run:
          name: Install
          command: ci install
      - run:
          name: Test
          command: ci test
      - run:
          name: Build Distribution
          command: ci after_test
      - persist_to_workspace:
          root: .
          paths: [dist]

  build-38:
    <<: *build_template
    docker:
      - image: cimg/python:3.8
        user: root

  build-39:
    <<: *build_template
    docker:
      - image: cimg/python:3.9
        user: root

  test_deploy:
    working_directory: /pyradiomics
    docker:
      - image: cimg/python:3.8
        user: root
    steps:
      - run:
          name: Check Repo User
          command: if [[ $CIRCLE_PROJECT_USERNAME != "AIM-Harvard" ]]; then circleci step halt; fi
      - checkout
      - run:
          name: Setup SciKit-CI
          command: |
            pip install scikit-ci scikit-ci-addons
            ci_addons --install ../addons
      - run:
          name: Install
          command: ci install
      - run:
          name: Install patchelf auditwheel, twine
          command: |
            apt update
            apt-get install patchelf  # needed to run auditwheel
            python -m pip install "auditwheel<3.2.0"
            python -m pip install twine
      # only attach the workspace at this point to prevent the removal of source distributions
      - attach_workspace:
          at: /pyradiomics
      - run:
          name: Create sdist
          command: python setup.py sdist
      - run:
          name: Fix Distribution Wheels
          command: |
            ls ./dist/*-linux_$(uname -m).whl  # This will prevent further deployment if no wheels are found
            # Since there are no external shared libraries to bundle into the wheels
            # this step will fixup the wheel switching from 'linux' to 'manylinux1' tag
            for whl in $(ls ./dist/*-linux_$(uname -m).whl); do
                python -m auditwheel repair $whl -w ./dist/
                rm $whl
            done
      - run:
          name: Deploy source and linux wheels
          command: python -m twine upload ./dist/*.whl ./dist/*.tar.gz -u $PYPI_TEST_USER -p $PYPI_TEST_PASSWORD -r testpypi

  deploy:
    working_directory: /pyradiomics
    docker:
      - image: cimg/python:3.6
        user: root
    steps:
      - run:
          name: Check Repo User
          command: if [[ $CIRCLE_PROJECT_USERNAME != "AIM-Harvard" ]]; then circleci step halt; fi
      - checkout
      - run:
          name: Setup SciKit-CI
          command: |
            pip install scikit-ci scikit-ci-addons
            ci_addons --install ../addons
      - run:
          name: Install
          command: ci install
      - run:
          name: Install patchelf auditwheel, twine
          command: |
            apt update
            apt-get install patchelf  # needed to run auditwheel
            python -m pip install "auditwheel<3.2.0"
            python -m pip install twine
      # only attach the workspace at this point to prevent the removal of source distributions
      - attach_workspace:
          at: /pyradiomics
      - run:
          name: Create sdist
          command: python setup.py sdist
      - run:
          name: Fix Distribution Wheels
          command: |
            ls ./dist/*-linux_$(uname -m).whl  # This will prevent further deployment if no wheels are found
            # Since there are no external shared libraries to bundle into the wheels
            # this step will fixup the wheel switching from 'linux' to 'manylinux1' tag
            for whl in $(ls ./dist/*-linux_$(uname -m).whl); do
                python -m auditwheel repair $whl -w ./dist/
                rm $whl
            done
      - run:
          name: Deploy source and linux wheels
          command: python -m twine upload ./dist/*.whl ./dist/*.tar.gz -u $PYPI_USER -p $PYPI_PASSWORD

  deploy_conda:
    working_directory: /pyradiomics
    docker:
      - image: cimg/python:3.8
        user: root
    steps:
      - run:
          name: Check Repo User
          command: if [[ $CIRCLE_PROJECT_USERNAME != "AIM-Harvard" ]]; then circleci step halt; fi
      - checkout
      - run:
          name: Install Miniconda
          command: |
            wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
            bash miniconda.sh -b -p $HOME/miniconda
            hash -r
            echo 'export PATH=$HOME/miniconda/bin:$PATH' >> $BASH_ENV
      - run:
          name: Configure Miniconda
          command: |
            conda install gcc_linux-64 libgcc
            bash ./conda/configure_conda.sh
      - run:
          name: Build Conda packages
          command: |
            mkdir  /conda-bld
            conda build ./conda --python=3.6 --croot /conda-bld
            conda build ./conda --python=3.7 --croot /conda-bld
            conda build ./conda --python=3.8 --croot /conda-bld
            conda build ./conda --python=3.9 --croot /conda-bld
      - run:
          name: Deploy Conda packages
          command: |
            anaconda -t $ANACONDA_TOKEN upload -u Radiomics /conda-bld/linux-64/pyradiomics-*.tar.bz2 --force

workflows:
  version: 2
  build_and_deploy:
    jobs:
      - build-mac-37: &build_job_template
          filters:
            tags:
              only:
                - /^v?[0-9]+(\.[0-9]+)*((a|b|rc)[0-9]+)?/
      - build-mac-38:
          <<: *build_job_template
      - build-mac-39:
          <<: *build_job_template
      - build-37:
          <<: *build_job_template
      - build-38:
          <<: *build_job_template
      - build-39:
          <<: *build_job_template
      - test-notebooks: &requires_template
          requires:
            - build-37
            - build-38
            - build-39
            - build-mac-37
            - build-mac-38
            - build-mac-39
      - test_deploy:
          <<: *requires_template
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only:
                - /^v?[0-9]+(\.[0-9]+)*((a|b|rc)[0-9]+)/
      - deploy:
          <<: *requires_template
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only:
                - /^v?[0-9]+(\.[0-9]+)*/
      - deploy_conda:
          <<: *requires_template
          filters:
            branches:
              ignore:
                - /.*/
            tags:
              only:
                - /^v?[0-9]+(\.[0-9]+)*((a|b|rc)[0-9]+)?/
